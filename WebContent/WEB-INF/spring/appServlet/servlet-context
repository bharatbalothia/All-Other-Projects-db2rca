<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
<!-- 	<annotation-driven conversion-service="conversionService" enable-matrix-variables="true"> -->
<!-- 		<argument-resolvers> -->
<!-- 			<beans:bean class="org.springframework.samples.mvc.data.custom.CustomArgumentResolver"/> -->
<!-- 		</argument-resolvers> -->
<!-- 		<async-support default-timeout="3000"> -->
<!-- 			<callable-interceptors> -->
<!-- 				<beans:bean class="org.springframework.samples.mvc.async.TimeoutCallableProcessingInterceptor" /> -->
<!-- 			</callable-interceptors> -->
<!-- 		</async-support> -->
<!-- 	</annotation-driven> -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<resources mapping="/resources/**" location="/resources/" order="3" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<beans:property name="order" value="2" />
		<beans:property name="prefix" value="WEB-INF/jsps/" />
		<beans:property name="suffix" value=".jsp" />		
	</beans:bean>
	  
	
	<!-- Only needed because we require fileupload in the org.springframework.samples.mvc.fileupload package -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	  <beans:property name="order" value="1" />

<!-- 	      <beans:property name="favorPathExtension" value="false" /> -->
<!--     <beans:property name="favorParameter" value="true" /> -->
<!--     <beans:property name="parameterName" value="mediaType" /> -->
<!--     <beans:property name="ignoreAcceptHeader" value="true" /> -->
    <beans:property name="useJaf" value="false" />
    <beans:property name="defaultContentType" value="application/json" />
    	<beans:property name="mediaTypes">
		<beans:map>
		   <beans:entry key="json" value="application/json" />
<!-- 		   <beans:entry key="xml" value="application/xml" /> -->
<!-- 		   <beans:entry key="rss" value="application/rss+xml" /> -->
		</beans:map>
	  </beans:property>
 
	  <beans:property name="defaultViews">
	  
		<beans:list>
		
		  <!-- JSON View -->
		  <beans:bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
			<beans:property name="extractValueFromSingleKeyModel" value="true" />
		  </beans:bean>
		  

		  <!-- RSS View -->
<!-- 		  <bean class="com.mkyong.common.rss.RssFeedView" /> -->
 
		  <!-- JAXB XML View -->
<!-- 		  <bean class="org.springframework.web.servlet.view.xml.MarshallingView"> -->
<!-- 			<constructor-arg> -->
<!-- 				<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> -->
<!-- 				   <property name="classesToBeBound"> -->
<!-- 					<list> -->
<!-- 					   <value>com.mkyong.common.model.Fruit</value> -->
<!-- 					</list> -->
<!-- 				   </property> -->
<!-- 				</bean> -->
<!-- 			</constructor-arg> -->
<!-- 		  </bean> -->
		  
		 </beans:list>
		 
	  </beans:property>
	  
	  <beans:property name="ignoreAcceptHeader" value="true" />
 
	</beans:bean>
	
	<!-- Imports user-defined @Controller beans that process client requests -->
	<beans:import resource="controllers.xml" />
	
	<!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven/>
	
</beans:beans>
